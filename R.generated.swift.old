//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 10 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    /// Resource file `MarvelApp.docx`.
    static let marvelAppDocx = Rswift.FileResource(bundle: R.hostingBundle, name: "MarvelApp", pathExtension: "docx")
    /// Resource file `amour-1.jpg`.
    static let amour1Jpg = Rswift.FileResource(bundle: R.hostingBundle, name: "amour-1", pathExtension: "jpg")
    /// Resource file `build_increment.sh`.
    static let build_incrementSh = Rswift.FileResource(bundle: R.hostingBundle, name: "build_increment", pathExtension: "sh")
    /// Resource file `build_increment2.sh`.
    static let build_increment2Sh = Rswift.FileResource(bundle: R.hostingBundle, name: "build_increment2", pathExtension: "sh")
    /// Resource file `sitrep.sh`.
    static let sitrepSh = Rswift.FileResource(bundle: R.hostingBundle, name: "sitrep", pathExtension: "sh")
    /// Resource file `sitrep`.
    static let sitrep = Rswift.FileResource(bundle: R.hostingBundle, name: "sitrep", pathExtension: "")
    /// Resource file `superheros.png`.
    static let superherosPng = Rswift.FileResource(bundle: R.hostingBundle, name: "superheros", pathExtension: "png")
    /// Resource file `swiftlint.sh`.
    static let swiftlintSh = Rswift.FileResource(bundle: R.hostingBundle, name: "swiftlint", pathExtension: "sh")
    /// Resource file `swiftlint`.
    static let swiftlint = Rswift.FileResource(bundle: R.hostingBundle, name: "swiftlint", pathExtension: "")

    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MarvelApp", withExtension: "docx")`
    static func marvelAppDocx(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.marvelAppDocx
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "amour-1", withExtension: "jpg")`
    static func amour1Jpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.amour1Jpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "build_increment", withExtension: "sh")`
    static func build_incrementSh(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.build_incrementSh
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "build_increment2", withExtension: "sh")`
    static func build_increment2Sh(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.build_increment2Sh
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sitrep", withExtension: "")`
    static func sitrep(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sitrep
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sitrep", withExtension: "sh")`
    static func sitrepSh(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sitrepSh
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "superheros", withExtension: "png")`
    static func superherosPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.superherosPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "swiftlint", withExtension: "")`
    static func swiftlint(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlint
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "swiftlint", withExtension: "sh")`
    static func swiftlintSh(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintSh
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `amour-0`.
    static let amour0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "amour-0")
    /// Image `amour-1.jpg`.
    static let amour1Jpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "amour-1.jpg")
    /// Image `superheros`.
    static let superheros = Rswift.ImageResource(bundle: R.hostingBundle, name: "superheros")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "amour-0", bundle: ..., traitCollection: ...)`
    static func amour0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amour0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "amour-1.jpg", bundle: ..., traitCollection: ...)`
    static func amour1Jpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amour1Jpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "superheros", bundle: ..., traitCollection: ...)`
    static func superheros(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.superheros, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `CharacterCell`.
    static let characterCell = _R.nib._CharacterCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CharacterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.characterCell) instead")
    static func characterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.characterCell)
    }
    #endif

    static func characterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CharacterCell? {
      return R.nib.characterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CharacterCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `characterCellId`.
    static let characterCellId: Rswift.ReuseIdentifier<CharacterCell> = Rswift.ReuseIdentifier(identifier: "characterCellId")
    /// Reuse identifier `comicsCellid`.
    static let comicsCellid: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "comicsCellid")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CharacterCell.validate()
    }

    struct _CharacterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CharacterCell

      let bundle = R.hostingBundle
      let identifier = "characterCellId"
      let name = "CharacterCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CharacterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CharacterCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "amour-0", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'amour-0' is used in nib 'CharacterCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let characterDetailViewController = StoryboardViewControllerResource<CharacterDetailViewController>(identifier: "CharacterDetailViewController")
      let charactersListViewController = StoryboardViewControllerResource<CharactersListViewController>(identifier: "CharactersListViewController")
      let comicDetailViewController = StoryboardViewControllerResource<ComicDetailViewController>(identifier: "ComicDetailViewController")
      let comicsListViewController = StoryboardViewControllerResource<ComicsListViewController>(identifier: "ComicsListViewController")
      let landingViewController = StoryboardViewControllerResource<LandingViewController>(identifier: "LandingViewController")
      let name = "Main"
      let onboardingViewController = StoryboardViewControllerResource<OnboardingViewController>(identifier: "OnboardingViewController")

      func characterDetailViewController(_: Void = ()) -> CharacterDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: characterDetailViewController)
      }

      func charactersListViewController(_: Void = ()) -> CharactersListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: charactersListViewController)
      }

      func comicDetailViewController(_: Void = ()) -> ComicDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: comicDetailViewController)
      }

      func comicsListViewController(_: Void = ()) -> ComicsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: comicsListViewController)
      }

      func landingViewController(_: Void = ()) -> LandingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landingViewController)
      }

      func onboardingViewController(_: Void = ()) -> OnboardingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "checkmark.rectangle.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkmark.rectangle.fill' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rectangle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rectangle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "superheros.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'superheros.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().characterDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'characterDetailViewController' could not be loaded from storyboard 'Main' as 'CharacterDetailViewController'.") }
        if _R.storyboard.main().charactersListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'charactersListViewController' could not be loaded from storyboard 'Main' as 'CharactersListViewController'.") }
        if _R.storyboard.main().comicDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'comicDetailViewController' could not be loaded from storyboard 'Main' as 'ComicDetailViewController'.") }
        if _R.storyboard.main().comicsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'comicsListViewController' could not be loaded from storyboard 'Main' as 'ComicsListViewController'.") }
        if _R.storyboard.main().landingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landingViewController' could not be loaded from storyboard 'Main' as 'LandingViewController'.") }
        if _R.storyboard.main().onboardingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingViewController' could not be loaded from storyboard 'Main' as 'OnboardingViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
